# -*- python -*-
Import('env')
import os

# Construct proto env (add protoc Builder)
pEnv = env.Clone(tools=['default', 'protoc'], PROTOC=os.environ["PROTOC"])
pFiles = pEnv.Protoc(
    [],
    "worker.proto",
    PROTOCPROTOPATH=['.',],
    PROTOCPYTHONOUTDIR=None,
    PROTOCOUTDIR = ".",
    #PROTOCOUTDIR = 'build', # defaults to same directory as .proto
    # PROTOCCPPOUTFLAGS = "dllexport_decl=PROTOCONFIG_EXPORT:", too 
)

sources = ["worker.pb.cc", "TaskMsgDigest.cc"]
pEnv.Append(CPPPATH=[os.environ["PROTOC_INC"], ".."],
            LIBPATH=os.environ["PROTOC_LIB"],
            CPPFLAGS=['-fPIC'])
lib = pEnv.Library("qserv_proto", sources)
installedLib = env.Install("../lib", lib)
env.Append(built_libs=[installedLib])

# Make a dependency file to "install" so that clients can use it properly.
def makeLibDepFile(target, source, env):
    deps = {'LIBPATH' : [os.path.abspath(os.environ["PROTOC_LIB"])],
            'LIBS' : ['protobuf','ssl']}
    dContents = str(deps)
    open(str(target[0]),"w").write(dContents)

libDep = env.Command("qserv_proto.deps", lib, makeLibDepFile)
env.Install("../lib", libDep)

def makeIncDepFile(target, source, env):
    deps = {'CPPPATH' : [os.path.abspath(os.environ["PROTOC_INC"])]}
    dContents = str(deps)
    open(str(target[0]), "w").write(dContents)

relPath = "../include/lsst/qserv"
fName = "worker.pb.h"
env.Install(relPath, fName)

incDep = env.Command("worker.pb.h.deps", "worker.pb.h", makeIncDepFile)
env.Install(relPath, incDep)
env.Install(relPath, "TaskMsgDigest.h")



