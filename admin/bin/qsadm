#!/usr/bin/env python

from __future__ import with_statement
import getpass
from optparse import OptionParser, OptionGroup
import os
import re
import select
import socket
import stat
import subprocess
import sys
import time

try:
    import MySQLdb
    haveMySQL = True
except:
    haveMySQL = False
try:
    import sqlite3
    haveSQLite = True
except:
    try:
        import sqlite as sqlite3
        haveSQLite = True
    except:
        haveSQLite = False

class QservAdmin(object):
    """Class for administering a qserv instance."""

    def __init__(self, dbUrl=None, password=None):
        """Constructor.

        @param dbUrl optional string of form "{db type}://{user}@{db host}[:{db port}]/{db name}" pointing to the admin database
        """

        self.dotPath = os.path.expanduser("~/.qsadm")
        self.conn = None
        self.fakeHost = False

        if dbUrl is not None:
            self._dbConnect(dbUrl, password)

    def __destroy__(self):
        self.conn.close()

###############################################################################
#
# Primary administration methods
#
###############################################################################

    def setDb(self, dbUrl):
        """Save database connection info in a cache at self.dotPath (~/.qsadm).
        Asks user for password if needed.

        @param dbUrl optional string of form "{db type}://[{user}@{db host}[:{db port}]]/{db name}" pointing to the admin database
        """

        exists = os.access(self.dotPath, os.R_OK)

        dbType, dbHost, dbPort, dbName, username = self._parseDbUrl(dbUrl)
        print "Database type:", dbType
        if dbHost is not None:
            print "Database host:", dbHost
        if dbPort is not None:
            print "Database port:", dbPort
        print "Database name:", dbName
        if username is not None:
            print "Username:", username

        needsPassword = self._needsPassword(dbType)
        if needsPassword:
            password = getpass.getpass()
            password2 = getpass.getpass("Confirm password: ")
            if password != password2:
                raise RuntimeError, "Passwords do not match" + \
                        (", cache unchanged" if exists else "")

        with open(self.dotPath, "w") as f:
            print >>f, dbUrl
        os.chmod(self.dotPath, stat.S_IRUSR | stat.S_IWUSR)
        if needsPassword:
            with open(self.dotPath, "a") as f:
                print >>f, password

    def getDb(self):
        exists = os.access(self.dotPath, os.R_OK)
        if not exists:
            raise RuntimeError, "No admin database URL saved"
        else:
            return self._readDotFile()[0]

    def getParam(self, param):
        self._dbConnect()
        cur = self.conn.cursor()
        cur.execute(
                self._cmd("SELECT value FROM GlobalConfig WHERE param = %s"),
                (param,))
        row = cur.fetchone()
        if row is None:
            raise RuntimeError, "No value stored for parameter: " + param
        return row[0]

    def getParams(self):
        self._dbConnect()
        cur = self.conn.cursor()
        cur.execute("SELECT param, value FROM GlobalConfig")
        params = dict()
        for k, v in cur.fetchall():
            params[k] = v
        return params

    def setParam(self, param, value):
        self._dbConnect()
        cur = self.conn.cursor()
        cur.execute(self._cmd(
            "REPLACE INTO GlobalConfig VALUES (%s, %s)"),
            (param, value))
        self.conn.commit()

    def addHost(self, hostPattern, configDict):
        hostType = configDict['type']
        self._dbConnect()
        cur = self.conn.cursor()
        cur.execute(
                self._cmd("INSERT INTO StaticConfig VALUES (%s, %s)"),
                    (hostPattern, hostType))
        self.conn.commit()
        pass

    def delHost(self, hostPattern, configDict):
        hostType = configDict['type']
        self._dbConnect()
        cur = self.conn.cursor()
        cur.execute(self._cmd(
            "DELETE FROM StaticConfig WHERE hostPattern = %s AND hostType = %s"),
            (hostPattern, hostType))
        self.conn.commit()

    def lsHost(self):
        self._dbConnect()
        cur = self.conn.cursor()
        cur.execute("SELECT * FROM StaticConfig")
        return cur.fetchall()

    def execute(self, nodeList, cmdList, filePattern=None):
        nodeSet = self._getNodeSet(nodeList)
        if filePattern is not None:
            procList = []
            for n in nodeSet:
                outfileName = filePattern % (n,)
                if not os.path.exists(os.path.dirname(outfileName)):
                    os.makedirs(os.path.dirname(outfileName))
                outfile = open(outfileName, "w")
                procList.append(subprocess.Popen(["ssh", n] + cmdList,
                    stdout=outfile, stderr=subprocess.STDOUT))
            for proc in procList:
                proc.wait()
            return
        else:
            fdList = []
            procs = {}
            for n in nodeSet:
                proc = subprocess.Popen(["ssh", n] + cmdList,
                    stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
                fdList.append(proc.stdout)
                procs[proc.stdout.fileno()] = (proc, n)

            while True:
                try:
                    rlist = select.select(fdList, [], [])[0]
                except KeyboardInterrupt:
                    print >>sys.stderr, "*** Interrupted from keyboard"
                    for fd in fdList:
                        os.kill(procs[fd.fileno()][0].pid, 15)
                    sys.exit(1)
                for fd in rlist:
                    line = fd.readline()
                    if line == "":
                        procs[fd.fileno()][0].wait()
                        fdList.remove(fd)
                        if len(fdList) == 0:
                            return
                    else:
                        print procs[fd.fileno()][1] + ":", line,

    def status(self, nodeList):
        self._dbConnect()
        nodeSet = self._getNodeSet(nodeList)
        cur = self.conn.cursor()
        result = []
        for host in nodeSet:
            cur.execute(self._cmd(
                "SELECT * FROM DynamicConfig WHERE host = %s"), (host,))
            result.append(cur.fetchone())
        return result

    def start(self, nodeList):
        self._dbConnect()
        nodeSet = self._getNodeSet(nodeList)
        pass

    def stop(self, nodeList):
        self._dbConnect()
        nodeSet = self._getNodeSet(nodeList)
        pass

    def restart(self, nodeList):
        self.stop(nodeList)
        self.start(nodeList)

    def shutdown(self):
        self._dbConnect()
        self.stop(["ALL"])
        cur = self.conn.cursor()
        cur.execute("DELETE FROM PartitionConfig")
        cur.execute("DELETE FROM DynamicConfig")
        cur.execute("DELETE FROM MasterBid")
        self.conn.commit()

    def initDb(self, dbUrl):
        self._dbConnect(dbUrl, newDb=True)

    def install(self, nodeList):
        self._dbConnect()
        nodeSet = self._getNodeSet(nodeList)
        pass

    def register(self):
        host = self.getHost()
        self._dbConnect()
        numManagers = int(self.getParam("NUM_MANAGERS"))
        numFrontEnds = int(self.getParam("NUM_FRONTENDS"))
        cur = self.conn.cursor()
        cur.execute(self._cmd(
            "SELECT hostPattern FROM StaticConfig WHERE hostType = 'MASTER'"))
        for row in cur.fetchall():
            pat = row[0]
            if re.match(pat, host):
                for i in xrange(numFrontEnds):
                    done = False
                    while not done:
                        try:
                            cur.execute(self._cmd(
                                "INSERT INTO MasterBid VALUES (%s, %s);"),
                                (i, host))
                            if i < numManagers:
                                hostType = "MANAGER"
                            else:
                                hostType = "FRONTEND"
                            cur.execute(self._cmd(
                                "INSERT INTO DynamicConfig VALUES (NULL, %s, %s, NULL);"),
                                (host, hostType))
                            self.conn.commit()
                            return hostType
                        except sqlite3.OperationalError, e:
                            print e
                        except sqlite3.IntegrityError, e:
                            done = True
                        except Exception, e:
                            print type(e), e
                            done = True
        cur.execute(self._cmd(
            "SELECT hostPattern FROM StaticConfig WHERE hostType = 'WORKER'"))
        for row in cur.fetchall():
            pat = row[0]
            if re.match(pat, host):
                done = False
                while not done:
                    try:
                        cur.execute(self._cmd(
                            "INSERT INTO DynamicConfig VALUES (NULL, %s, %s, NULL);"),
                            (host, "WORKER"))
                        self.conn.commit()
                        return "WORKER"
                    except sqlite3.OperationalError, e:
                        print e
                    except sqlite3.IntegrityError, e:
                        done = True
                    except Exception, e:
                        print type(e), e
                        done = True
        raise RuntimeError, "No available match for host: %s" % (host,)
    
    def waitForMasters(self):
        self._dbConnect()
        numFrontEnds = int(self.getParam("NUM_FRONTENDS"))
        observedFrontEnds = 0
        while observedFrontEnds < numFrontEnds:
            time.sleep(2)
            cur = self.conn.cursor()
            cur.execute("SELECT COUNT(*) FROM DynamicConfig WHERE hostType IN ('MANAGER', 'FRONTEND')")
            observedFrontEnds = cur.fetchone()[0]

    def waitForMasterStart(self):
        self._dbConnect()
        numFrontEnds = int(self.getParam("NUM_FRONTENDS"))
        observedFrontEnds = 0
        while observedFrontEnds < numFrontEnds:
            time.sleep(2)
            cur = self.conn.cursor()
            cur.execute("SELECT COUNT(*) FROM DynamicConfig WHERE hostType IN ('MANAGER', 'FRONTEND') AND pid IS NOT NULL")
            observedFrontEnds = cur.fetchone()[0]

    def waitForWorkerReg(self):
        self._dbConnect()
        numFrontEnds = int(self.getParam("NUM_FRONTENDS"))
        numWorkers = int(self.getParam("NUM_NODES")) - numFrontEnds
        observedWorkers = 0
        while observedWorkers < numWorkers:
            time.sleep(2)
            cur = self.conn.cursor()
            cur.execute("SELECT COUNT(*) FROM DynamicConfig WHERE hostType = 'WORKER'")
            observedWorkers = cur.fetchone()[0]

    def localInstall(self, hostType):
        execEnv = dict(host=self.getHost(), managers=self._getManagers(),
                frontends=self._getFrontEnds())
        script = self.getParam(hostType + "_INSTALL_SCRIPT")
        with open(script, "r") as scriptFile:
            exec scriptFile in execEnv

    def partitionStrategy(self):
        host = self.getHost()
        numPartitions = int(self.getParam("NUM_PARTITIONS"))
        numNodes = int(self.getParam("NUM_NODES"))
        cur = self.conn.cursor()
        cur.execute("SELECT host FROM DynamicConfig ORDER BY hostId")
        nodeId = cur.fetchall().index((host,))
        partitionList = [_ for _ in xrange(numPartitions) \
                if _ % numNodes == nodeId]
        return partitionList

    def loadPartitions(self):
        self._dbConnect()
        host = self.getHost()
        partitionList = self.partitionStrategy()
        cur = self.conn.cursor()
        for partition in partitionList:
            cur.execute(self._cmd(
                "INSERT INTO PartitionConfig VALUES (%s, %s)"),
                (host, partition))
        self.conn.commit()

        execEnv = dict(host=self.getHost(), partitions=partitionList)
        script = self.getParam("PARTITION_LOAD_SCRIPT")
        with open(script, "r") as scriptFile:
            exec scriptFile in execEnv

    def localStartup(self, hostType):
        self._dbConnect()
        host = self.getHost()
        cur = self.conn.cursor()
        cur.execute(self._cmd(
            "UPDATE DynamicConfig SET pid = %s WHERE host = %s"),
            (os.getpid(), host))
        execEnv = dict(host=host)
        script = self.getParam(hostType + "_RUN_SCRIPT")
        with open(script, "r") as scriptFile:
            exec scriptFile in execEnv

    def waitForStart(self):
        self._dbConnect()
        numFrontEnds = int(self.getParam("NUM_NODES"))
        observedNodes = 0
        while observedNodes < numNodes:
            time.sleep(2)
            cur = self.conn.cursor()
            cur.execute("SELECT COUNT(*) FROM DynamicConfig WHERE pid IS NOT NULL")
            observedNodes = cur.fetchone()[0]

    def getHost(self):
        host = socket.getfqdn()
        if self.fakeHost:
            host += "-" + str(os.getpid())
        return host

    def dumpConfig(self):
        self._dbConnect()
        cur = self.conn.cursor()
        print "Global Configuration:"
        cur.execute("SELECT * FROM GlobalConfig")
        print cur.fetchall()
        print "Static Configuration:"
        cur.execute("SELECT * FROM StaticConfig")
        print cur.fetchall()
        print "Partition Configuration:"
        cur.execute("SELECT * FROM PartitionConfig")
        print cur.fetchall()
        print "Dynamic Configuration:"
        cur.execute("SELECT * FROM DynamicConfig")
        print cur.fetchall()
        print "Master Bidding Table:"
        cur.execute("SELECT * FROM MasterBid")
        print cur.fetchall()


###############################################################################
#
# Internal database connection routines
#
###############################################################################

    def _parseDbUrl(self, dbUrl):
        """(Internal) Parse admin database URL into components.

        @param dbUrl optional string of form "{db type}://[{user}@{db host}[:{db port}]]/{db name}" pointing to the admin database
        @return dbType
        @return dbHost None if not specified
        @return dbPort None if not specified
        @return dbName (restricted to alphanumerics, dot, and underscore)
        @return username None if not specified
        """
        m = re.match(r'(\w+)://(([\w.]+)@([\w.]+)(:(\d+))?)?/([\w./]+)', dbUrl)
        if not m:
            raise RuntimeError, "Unrecognized database URL: " + dbUrl
        return m.group(1), m.group(4), m.group(6), m.group(7), m.group(3)

    def _needsPassword(self, dbType):
        """(Internal) Return True if database type requires a password."""

        return not dbType.startswith("sqlite")

    def _dbConnect(self, dbUrl=None, password=None, newDb=False):
        """(Internal) Connect to the admin database.

        @param dbUrl optional string of form "{db type}://[{user}@{db host}[:{db port}]]/{db name}" pointing to the admin database
        @param password optional password string for admin database
        @param newDb if True, create the database

        Connection information is read from the cache if no dbUrl is provided.

        Password is read from the user if needed by the database type and not
        provided as an argument or via the cache.
        """

        if self.conn is not None:
            return

        createExtra = ""
        if dbUrl is None:
            dbUrl, password = self._readDotFile()
        dbType, dbHost, dbPort, dbName, username = self._parseDbUrl(dbUrl)
        if dbType == "mysql" and haveMySQL:
            if password is None:
                password = getpass.getpass()
            if dbPort is None:
                dbPort = 3306
            if newDb:
                valueType = "MEDIUMTEXT"
                createExtra = " ENGINE=InnoDB"
                autoinc = " AUTO_INCREMENT"
                with MySQLdb.connect(
                        host=dbHost,
                        port=dbPort,
                        user=username,
                        passwd=password) as cur:
                    # dbName has been restricted to alphanumerics by
                    # parseDbUrl, so this is not a security hole
                    cur.execute("DROP DATABASE IF EXISTS `%s`;" % (dbName,))
                    cur.execute("CREATE DATABASE `%s`;" % (dbName,))
            self.conn = MySQLdb.connect(
                    host=dbHost,
                    port=dbPort,
                    user=username,
                    passwd=password,
                    db=dbName)
            self._cmd = lambda cmd: cmd
        elif dbType in ["sqlite3", "sqlite"] and haveSQLite:
            self.conn = sqlite3.connect(database=dbName)
            if not self.conn:
                raise RuntimeError, \
                        "Unable to connect to SQLite database: " + dbName
            if sqlite3.paramstyle != "pyformat":
                self._cmd = lambda cmd: cmd.replace("%s", "?")
            else:
                self._cmd = lambda cmd: cmd
            if newDb:
                valueType = "TEXT"
                createExtra = ""
                autoinc = "PRIMARY KEY AUTOINCREMENT"
                self.conn.execute("DROP TABLE IF EXISTS GlobalConfig;")
                self.conn.execute("DROP TABLE IF EXISTS StaticConfig;")
                self.conn.execute("DROP TABLE IF EXISTS PartitionConfig;")
                self.conn.execute("DROP TABLE IF EXISTS DynamicConfig;")
                self.conn.execute("DROP TABLE IF EXISTS MasterBid;")
        else:
            raise RuntimeError, \
                    "Unrecognized/unavailable database type: " + dbType
        if newDb:
            cur = self.conn.cursor()
            cur.execute("""
            CREATE TABLE GlobalConfig (
                param VARCHAR(80) NOT NULL,
                value %s,
                UNIQUE (param)
            )""" % (valueType,) + createExtra + ";")
            cur.execute("""
            CREATE TABLE StaticConfig (
                hostPattern VARCHAR(255) NOT NULL,
                hostType VARCHAR(6) NOT NULL
            )""" + createExtra + ";")
            cur.execute("""
            CREATE TABLE PartitionConfig (
                hostId INTEGER,
                partition INTEGER
            )""" + createExtra + ";")
            cur.execute("""
            CREATE TABLE DynamicConfig (
                hostId INTEGER %s,
                host VARCHAR(255) NOT NULL,
                hostType VARCHAR(8) NOT NULL,
                pid INTEGER,
                UNIQUE (host)
            )""" % autoinc + createExtra + ";")
            cur.execute("""
            CREATE TABLE MasterBid (
                masterNum INT NOT NULL,
                host VARCHAR(255) NOT NULL,
                PRIMARY KEY (masterNum)
            )""" + createExtra + ";")
            self.conn.commit()

    def _readDotFile(self):
        """(Internal) Read the database connection info cache from self.dotPath (~/.qsadm).
        """

        if not os.access(self.dotPath, os.R_OK):
            raise RuntimeError, "No database URL provided " + \
                    "and ~/.qsadm does not exist or is inaccessible."

        with open(self.dotPath, "r") as f:
            lines = f.readlines()
            if len(lines) < 1:
                raise RuntimeError, "Empty ~/.qsadm cache file"
            elif len(lines) < 2:
                dbUrl = lines[0].strip()
                password = None
            else:
                dbUrl = lines[0].strip()
                password = lines[1].strip('\n')
        return dbUrl, password

###############################################################################
#
# Internal database manipulation routines
#
###############################################################################

    def _getHosts(self, hostType=None):
        self._dbConnect()
        cur = self.conn.cursor()
        if hostType is None:
            cur.execute("SELECT host FROM DynamicConfig")
        else:
            cur.execute(self._cmd(
                "SELECT host FROM DynamicConfig WHERE hostType = %s"),
                (hostType,))
        return [_[0] for _ in cur.fetchall()]

    def _getWorkers(self):
        return self._getHosts("WORKER")

    def _getFrontEnds(self):
        return self._getHosts("FRONTEND")

    def _getManagers(self):
        return self._getHosts("MANAGER")

    def _getNodeSet(self, nodeList):
        nodeSet = set()
        if len(nodeList) == 0:
            nodeList = ["ALL"]
        for node in nodeList:
            if node in ("WORKERS", "FRONTENDS", "MANAGERS", "ALL"):
                if node == "WORKERS":
                    nodeSet.update(set(self._getWorkers()))
                elif node == "FRONTENDS":
                    nodeSet.update(set(self._getFrontEnds()))
                elif node == "MANAGERS":
                    nodeSet.update(set(self._getManagers()))
                else:
                    nodeSet.update(set(self._getHosts()))
            else:
                nodeSet.add(node)
        return nodeSet

###############################################################################
#
# Option parsing and main program
#
###############################################################################

    def parseOptions():
        usage = """usage: %prog [-v] [-u DBURL] COMMAND [options] [args]

Commands:
  initdb                sets up administrative database
  setdb                 saves database URL and credentials in ~/.qsadm
  getdb                 lists current saved database URL

  exec -n NODE [-o FILEPATTERN] -- CMD
                        executes CMD on specified node(s)

  get {PARAM|*}         prints value of global configuration parameter
  set PARAM {VALUE|-f FILE}
                        sets global configuration parameter
  addhost PATTERN [config options]
                        adds host or host pattern to static config
  delhost PATTERN [config options]
                        deletes host or host pattern from static config
  lshost                lists host patterns from static config
  dumpconfig            dumps entire configuration database

  status -n NODE        gives status information on specified node(s)
  start -n NODE         starts specified node(s) (fixed configuration only)
  stop -n NODE          stops specified node(s)
  restart -n NODE       restarts specified node(s) (fixed configuration only)
  shutdown              shuts down entire system

  install -n NODE       installs qserv software on node

  register              registers current host, returning type
  batch                 registers, configures, and starts current host
  batchwait             waits for all nodes to start

  dumpconfig            dumps out current configuration in admin database
  
Parameters:
  NUM_MANAGERS          Number of managers to configure
  NUM_FRONTENDS         Number of frontends to configure (including managers)
  NUM_NODES             Total number of nodes expected
  NUM_PARTITIONS        Number of partitions to be loaded
  MANAGER_INSTALL_SCRIPT
  FRONTEND_INSTALL_SCRIPT
  WORKER_INSTALL_SCRIPT
                        Python install script pathnames (receive names of
                        host, managers, and frontends in global variables with
                        those names)
  MANAGER_RUN_SCRIPT
  FRONTEND_RUN_SCRIPT
  WORKER_RUN_SCRIPT
                        Python startup script pathnames (receive name of
                        host in global variable with that name)
  PARTITION_LOAD_SCRIPT
                        Python script to load partitions into node (receives
                        name of host and list of partition numbers in global
                        variables host/partitions)"""

        parser = OptionParser(usage=usage)
        group = OptionGroup(parser, "Overall Options")
        group.add_option("-v", "--verbose", action="store_true",
                dest="verbose")
        group.add_option("-u", "--url", dest="dbUrl",
                help="admin database URL of form {db type}://{user}@{db host}[:{db port}]/{db name}")
        parser.add_option_group(group)

        group = OptionGroup(parser, "Node Selection Option (can be repeated)")
        group.add_option("-n", "--node", dest="nodeList", action="append",
                default=[],
                help="nodes (name|MASTERS|MANAGERS|FRONTENDS|WORKERS|ALL)")
        parser.add_option_group(group)

        group = OptionGroup(parser, "Exec Option")
        group.add_option("-o", "--output", dest="filepattern",
                help="output log file name pattern (using %s for hostname)")
        parser.add_option_group(group)

        group = OptionGroup(parser, "Node Configuration Options")
        group.add_option("-t", "--type", dest="type",
                default="WORKER",
                help="node type (MASTER|WORKER)")
        group.add_option("-f", "--file", dest="file",
                help="file containing configuration parameter value text")
        parser.add_option_group(group)

        parser.add_option("--fake-host", dest="fakeHost", action="store_true",
                help="fake variable host names with process id for testing")

        (options, args) = parser.parse_args()

        self.fakeHost = options.fakeHost

        if len(args) < 1:
            parser.error("No subcommand given")
        cmd = "_cmd_" + args[0]
        if not hasattr(self, cmd):
            parser.error("Unrecognized command: " + cmd)
        del args[0]
        return getattr(self, cmd), options, args

    """The following functions reformat the provided options and arguments
    into arguments for the actual methods above."""

    def _cmd_setdb(self, options, args):
        if options.dbUrl is None and len(args) == 1:
            options.dbUrl = args[0]
        else:
            raise RuntimeError, "No database URL provided"
        self.setDb(options.dbUrl)

    def _cmd_getdb(self, options, args):
        print self.getDb()

    def _cmd_get(self, options, args):
        if args[0] == '*':
            for k, v in self.getParams().iteritems():
                print k, "=", v
        else:
            print self.getParam(args[0])

    def _cmd_set(self, options, args):
        if options.file is not None:
            with open(options.file, "r") as f:
                value = f.read(1000000)
        else:
            value = args[1]
        self.setParam(args[0], value)

    def _cmd_addhost(self, options, args):
        self.addHost(args[0], {'type': options.type})

    def _cmd_delhost(self, options, args):
        self.delHost(args[0], {'type': options.type})

    def _cmd_lshost(self, options, args):
        for row in self.lsHost():
            print "Host pattern:", row[0], "Type:", row[1]

    def _cmd_exec(self, options, args):
        self.execute(options.nodeList, args, options.filepattern)

    def _cmd_status(self, options, args):
        for row in self.status(options.nodeList):
            print "Host:", row[0], "Type:", row[1], "Pid:", row[2]

    def _cmd_start(self, options, args):
        self.start(options.nodeList)

    def _cmd_stop(self, options, args):
        self.stop(options.nodeList)

    def _cmd_restart(self, options, args):
        self.restart(options.nodeList)

    def _cmd_shutdown(self, options, args):
        self.shutdown()

    def _cmd_initdb(self, options, args):
        if options.dbUrl is None:
            if len(args) == 1:
                options.dbUrl = args[0]
            else:
                raise RuntimeError, "No database URL provided"
        self.initDb(options.dbUrl)

    def _cmd_install(self, options, args):
        self.install(options.nodeList)

    def _cmd_register(self, options, args):
        print self.register()

    def _cmd_batch(self, options, args):
        hostType = self.register()
        self.waitForMasters()
        self.localInstall(hostType)
        if hostType == "WORKER":
            self.waitForWorkerReg()
            self.loadPartitions()
            self.waitForMasterStart()
        self.localStartup(hostType)

    def _cmd_batchwait(self, options, args):
        self.waitForStart()

    def _cmd_dumpconfig(self, options, args):
        self.dumpConfig()

def main():
    qsadm = QservAdmin()
    (cmd, options, args) = qsadm.parseOptions()
    cmd(options, args)

if __name__ == "__main__":
    main()

