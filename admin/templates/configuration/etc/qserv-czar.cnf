
[frontend]

xrootd={{XROOTD_MANAGER_HOST}}:{{XROOTD_PORT}}

#[mgmtdb]
#db=qservMeta
# Steal resultdb settings for now.

[css]
technology = mysql
username = {{MYSQLD_USER_QSERV}}
password =
database = qservCssData
hostname = {{MYSQLDSHARED_HOST}}
port = {{MYSQLDSHARED_PORT}}

[resultdb]
passwd =
db = qservResult
unix_socket = {{MYSQLD_SOCK}}
host =
user = {{MYSQLD_USER_QSERV}}
port = 0

# maximum user query result size in MB
maxtablesize_mb = 5100

# Database engine used for aggreagting results. 
# Values:   myisam, innodb, memory
# myisam is serial, innodb and memory are parallel.
# memory does not support blob or text fields and fails on larger queries.
engine = innodb 

# The maximum number of database connections to use for
# aggregating results. Only meaningful for 'parallel' 
# engines such as innodb and memory.
maxconnections = 40


# database connection for QMeta database
[qmeta]
passwd =
db = qservMeta
host = {{MYSQLDSHARED_HOST}}
user = {{MYSQLD_USER_QSERV}}
port = {{MYSQLDSHARED_PORT}}

# database connection for QStatusData
# Using qmeta for now. May move this qservResult or make its own instance
# databse based on what happens with multiple czars.
[qstatus]
passwd =
#db = qservStatusData
db = qservMeta
user = {{MYSQLD_USER_QSERV}}
host = {{MYSQLDSHARED_HOST}}
port = {{MYSQLDSHARED_PORT}}

[partitioner]
# emptyChunkPath is used to check existence of empty_$DBNAME.txt
emptyChunkPath = {{QSERV_DATA_DIR}}/qserv

# If emptyChunkPath isn't defined or emptyChunkPath/empty_$DBNAME.txt
# doesn't exist then emptyChunkListFile is used for queries on $DBNAME
emptyChunkListFile = {{QSERV_DATA_DIR}}/qserv/emptyChunks.txt

[tuning]
#memoryEngine = yes
#largeResultConcurrentMerges = 3
largeResultConcurrentMerges = 6
# xrootdCBThreadsInit must be less than xrootdCBThreadsMax
xrootdCBThreadsMax = 500
xrootdCBThreadsInit = 50
# Seconds between updates the czar sends to qmeta for completed chunks.
# This is per user query and important milestones ignore this limit.
qMetaSecsBetweenChunkCompletionUpdates = 59

#[debug]
#chunkLimit = -1


# see qdisp/QdispPool.h QdispPool::QdispPool for more information
[qdisppool]
#size of the pool
poolSize = 2400
# Low numbers are higher priority. Largest priority 3 creates 4 priority queues 0, 1, 2, 3
largestPriority = 3
# Maximum number of threads running for each queue. No spaces. Values separated by ':'
vectRunSizes = 1200:1200:1200:1000
# Minimum number of threads running for each queue. No spaces. Values separated by ':'
vectMinRunningSizes = 0:1:3:3

[log]
logConfig = {{QSERV_RUN_DIR}}/etc/log4cxx.czar.properties
