# -*- python -*-
import subprocess, os, sys

Import("env")

testEnv = env.Clone()
testEnv.Append(LIBPATH = ["../bldNoXrd/src"])
#testEnv.Append(CPPPATH = ["../include"])
testEnv.Append(LIBS = ["qserv_worker", "stdc++"])
#testEnv.Append(CCFLAGS=["-DNO_XROOTD_FS"])


def run_test(target, source, env):
    log = file(str(target[0]) + ".failed", "w")
    ret = subprocess.call(str(source[0]),
            stdout=log, stderr=log, env=os.environ)
    log.close()
    if ret == 0:
        os.rename(str(target[0]) + ".failed", str(target[0]))
    else:
        print >> sys.stderr, "*** TEST FAILED ***", source[0]
    return ret

bld = Builder(action = run_test, prefix = ".tests/")
testEnv.Append(BUILDERS = {'Test': bld})

for src in Glob("*.cc"):
    prog = testEnv.Program(src)
    test = testEnv.Test(prog)
    testEnv.Depends(test, testEnv['built_libs'])
    pass

for src in Glob("*.py"):
    testEnv.Test(src)
