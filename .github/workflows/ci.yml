# Qserv CI workflow
---
name: "CI"
on:
  push:
  pull_request:
    branches:
      - main
jobs:
  build:
    name: Build image
    runs-on: ubuntu-20.04
    steps:
      - name: Install python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install click
        run: |
          python -m pip install --upgrade pip
          pip install click pyyaml requests

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # 0 is "all history and branch tags"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.FM_DOCKERHUB_TOKEN_USER }}
          password: ${{ secrets.FM_DOCKERHUB_TOKEN }}

      - name: Prepare lite-build image
        run: |
          ./admin/local/cli/qserv --log-level DEBUG build-build-image \
          --pull-image \
          --push-image
        env:
          QSERV_DH_USER: ${{ secrets.FM_DOCKERHUB_TOKEN_USER }}
          QSERV_DH_TOKEN: ${{ secrets.FM_DOCKERHUB_TOKEN }}

      - name: Prepare lite-run-base image
        run: |
          ./admin/local/cli/qserv --log-level DEBUG build-run-base-image \
          --pull-image \
          --push-image
        env:
          QSERV_DH_USER: ${{ secrets.FM_DOCKERHUB_TOKEN_USER }}
          QSERV_DH_TOKEN: ${{ secrets.FM_DOCKERHUB_TOKEN }}

      - name: Prepare user build image
        run: |
          ./admin/local/cli/qserv --log-level DEBUG build-user-build-image \
          --group docker_outer

      - name: Prepare maraidb image
        run: |
          ./admin/local/cli/qserv --log-level DEBUG build-mariadb-image \
          --pull-image \
          --push-image
        env:
          QSERV_DH_USER: ${{ secrets.FM_DOCKERHUB_TOKEN_USER }}
          QSERV_DH_TOKEN: ${{ secrets.FM_DOCKERHUB_TOKEN }}

      # Pull-image on this stage should only ever have an effect when rerunnning a job from
      # the github actions web page. This is useful for re-running integration tests on
      # a successful build to sniff out intermittent integration test issues.
      # To rerun the whole build, push a new sha to the branch.
      #
      # Specify -j2 because the github actions virutal machine has 2 cores, so restrict the
      # number of jobs to the same.
      - name: Build lite-qserv image
        run: |
          ./admin/local/cli/qserv --log-level DEBUG build \
          --pull-image \
          --push-image \
          -j2
        env:
          QSERV_DH_USER: ${{ secrets.FM_DOCKERHUB_TOKEN_USER }}
          QSERV_DH_TOKEN: ${{ secrets.FM_DOCKERHUB_TOKEN }}

      - name: Launch qserv
        run: |
          ./admin/local/cli/qserv --log-level DEBUG up

      - name: Run integration tests
        run: |
          ./admin/local/cli/qserv --log-level DEBUG itest \
          --wait 180

      - name: Remove integration test volumes
        run: |
          ./admin/local/cli/qserv --log-level DEBUG itest-rm

      - name: Shut down qserv
        run: |
          ./admin/local/cli/qserv --log-level DEBUG down \
          -v

      - name: Notify Slack if CI failed on main
        uses: voxmedia/github-action-slack-notify-build@v1
        if: github.ref == 'refs/heads/main' && failure()
        with:
          channel_id: G2JPZ3GC8  # this is the channel id of the dm_db_team room
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.QSERV_GHA_BUILD_NOTIFICATIONS }}

      # TEMP remove after verifying that the bot can post to the dm-db-team room
      - name: Test Slack CI notification on main
        uses: voxmedia/github-action-slack-notify-build@v1
        if: github.ref == 'refs/heads/main' && always()
        with:
          channel_id: G2JPZ3GC8  # this is the channel id of the dm_db_team room
          status: SUCCESS
        env:
          SLACK_BOT_TOKEN: ${{ secrets.QSERV_GHA_BUILD_NOTIFICATIONS }}
