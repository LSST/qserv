# -*- python -*-
# top level
import os

## Include the protoc, antlr, and swig builder tools
env = Environment(tools=['default', 'protoc', 'antlr', 'swig'])
env.Default(env.Alias("build"))
Depends(env.Alias("install"), env.Alias("build"))

# Setup the #include paths
env.Append(CPPPATH="modules")

# Set the build directory using "scons build=path/to/builddir"

#####################
#
# Build dir
#
#####################
AddOption('--build',
        dest='buildDir',
        type='string',
        nargs=1,
        action='store',
        metavar='DIR',
        default= 'build',
        help='Qserv build dir')

buildDir = GetOption('buildDir')
print "Building into", buildDir

#####################
#
# Install prefix
#
#####################
AddOption('--prefix',
        dest='prefix',
        type='string',
        nargs=1,
        action='store',
        metavar='DIR',
        default= os.path.join(buildDir,'dist'),
        help='Qserv installation prefix')

prefix = GetOption('prefix')
env.Replace(PYTHON_PREFIX = os.path.join(prefix, "lib", "python"))

############################
#
# Trigger the modules build
#
############################
filesToInstall = SConscript('modules/SConscript', variant_dir=buildDir, duplicate=1,
        exports=['env', 'ARGUMENTS'])

############################
#
# Defining install target
#
############################
def get_install_targets(prefix, filesToInstall) :
    targetDirSet = set()
    for (path, f) in filesToInstall :
        targetDir = os.path.join(prefix, path)
        env.Install(targetDir, f)
        targetDirSet.add(targetDir)
    return list(targetDirSet)

env.Alias("install", get_install_targets(prefix,filesToInstall))

# #
# # Build TAGS files
# #
# files = scons.filesToTag()
# if files:
#     env.Command("TAGS", files, "etags -o $TARGET $
