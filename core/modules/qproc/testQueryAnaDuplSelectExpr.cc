// -*- LSST-C++ -*-
/*
 * LSST Data Management System
 * Copyright 2009-2015 AURA/LSST.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */

 /**
  * @file
  *
  * @brief Test C++ parsing and query analysis logic for select expressions
  *
  *
  * @author Fabrice Jammes, IN2P3/SLAC
  */

// System headers
#include <algorithm>
#include <iostream>
#include <iterator>
#include <map>
#include <sstream>
#include <string>

// Third-party headers
#include "boost/algorithm/string.hpp"

// Boost unit test header
#define BOOST_TEST_MODULE QueryAnaDuplicateSelectExpr
#include "boost/test/included/unit_test.hpp"

// Qserv headers
#include "css/Facade.h"
#include "global/stringTypes.h"
#include "parser/ParseException.h"
#include "parser/parseExceptions.h"
#include "parser/SelectParser.h"
#include "qdisp/ChunkMeta.h"
#include "qproc/QuerySession.h"
#include "query/Constraint.h"
#include "query/QsRestrictor.h"
#include "query/QueryContext.h"
#include "query/SelectList.h"
#include "query/SelectStmt.h"
#include "query/typedefs.h"
#include "testMap.h" // Generated by scons action from testMap.kvmap
#include "testQueryAna.h"

using lsst::qserv::parser::SelectParser;
using lsst::qserv::parser::UnknownAntlrError;
using lsst::qserv::qdisp::ChunkMeta;
using lsst::qserv::qproc::ChunkQuerySpec;
using lsst::qserv::qproc::ChunkSpec;
using lsst::qserv::qproc::QuerySession;
using lsst::qserv::query::Constraint;
using lsst::qserv::query::ConstraintVec;
using lsst::qserv::query::ConstraintVector;
using lsst::qserv::query::QsRestrictor;
using lsst::qserv::query::QueryContext;
using lsst::qserv::query::SelectList;
using lsst::qserv::query::SelectStmt;
using lsst::qserv::query::ValueExprPtrVector;
using lsst::qserv::StringPair;
using lsst::qserv::StringVector;

namespace test = boost::test_tools;

////////////////////////////////////////////////////////////////////////
// CppParser basic tests
////////////////////////////////////////////////////////////////////////
BOOST_FIXTURE_TEST_SUITE(SelectExpr, ParserFixture)

BOOST_AUTO_TEST_CASE(SelectAggregate) {
    std::string stmt = "select sum(pm_declErr) as f1,chunkId as f1, avg(bMagF2) bmf2 from LSST.Object where bMagF > 20.0 GROUP BY chunkId;";

    boost::shared_ptr<QuerySession> qs = testStmt3(qsTest, stmt);
    boost::shared_ptr<QueryContext> context = qs->dbgGetContext();
    SelectStmt const& ss = qs->getStmt();

    SelectList selectList = ss.getSelectList();
    std::ostringstream stream;
    selectList.dbgPrint(stream);
    BOOST_TEST_MESSAGE( "Select stmt: " <<  stmt << "\n" << stream.str());
}

BOOST_AUTO_TEST_CASE(SelectAggregateSameCol) {
    std::string stmt = "select sum(pm_declErr), chunkId as f1, chunkId AS f1, avg(pm_declErr) from LSST.Object where bMagF > 20.0 GROUP BY chunkId;";

    boost::shared_ptr<QuerySession> qs = testStmt3(qsTest, stmt);
    boost::shared_ptr<QueryContext> context = qs->dbgGetContext();
    SelectStmt const& ss = qs->getStmt();

    SelectList selectList = ss.getSelectList();
    std::ostringstream stream;
    selectList.dbgPrint(stream);
    BOOST_TEST_MESSAGE( "Select stmt: " <<  stmt << "\n" << stream.str());

    StringVector dupNames = selectList.getDuplicateSelectExprNames();
    std::string dupNamesList = "[";
    for( StringVector::const_iterator i = dupNames.begin(); i != dupNames.end(); ++i) {
        dupNamesList += *i;
    }
    dupNamesList += "]";

    BOOST_TEST_MESSAGE( "Duplicate select expression name: " << dupNamesList);
}

BOOST_AUTO_TEST_SUITE_END()
