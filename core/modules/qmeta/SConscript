# -*- python -*-
import os

Import('env')
Import('standardModule')

# PYTHON_INC_DIR is set by pymod tool
pythonInc = env['PYTHON_INC_DIR']
cppPath = env['CPPPATH'] + [pythonInc]

# Use special C++ file suffix to avoid mix with standardModule()
# Python module is generated in python/ directory for standardModule()
swigged = env.SharedObject(source="qmetaLib.i",
                           SWIGFLAGS=['-python', '-c++', '-Iinclude'],
                           SWIGPATH=['..', pythonInc],
                           CPPPATH=cppPath,
                           SWIGCXXFILESUFFIX='_wrap.c++',
                           SWIGOUTDIR=env.Dir("python"))

build_data = DefaultEnvironment()['build_data']
build_data['module_objects']['qmeta:python'] = swigged

# Create entry for python file, which SCons SWIG builder ignores
pySwig = env.File(os.path.join('python', 'qmetaLib.py'))

# runs standard stuff _after_ above to install Python module
standardModule(env, unit_tests=[])

# install schema files
build_data['install'] += env.Install("$prefix/share/qserv/schema/qmeta", env.Glob("schema/*.sql"))
