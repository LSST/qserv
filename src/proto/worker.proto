/*
 * LSST Data Management System
 * Copyright 2011-2015 LSST Corporation.
 *
 * This product includes software developed by the
 * LSST Project (http://www.lsst.org/).
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the LSST License Statement and
 * the GNU General Public License along with this program.  If not,
 * see <http://www.lsstcorp.org/LegalNotices/>.
 */
/// worker.proto
/// This defines the wire-messages sent between czar and worker.

// After enabling this option, please visit Qserv code to allow
// Arena where it's protected by macro QSERV_USE_PROTO_ARENA.
syntax = "proto2";
option cc_enable_arenas = true;

package lsst.qserv.proto;

// Query message sent to worker
// One of these Task objects should be sent.
message TaskMsg {
    optional int64 session = 1;
    // Future: might have multiple db/chunk dependencies.
    optional string db = 2;
    optional int32 chunkid = 3;
    // repeated string scantables = 4;  // obsolete
    optional string user = 6;
    optional int32 protocol = 7; // Null or 1: original mysqldump, 2: row-based result
    optional int32 scanpriority = 8;
    message Subchunk {
        optional string database = 1; // database (unused)
        repeated DbTbl dbtbl = 2; // subchunked tables
        repeated int32 id = 3; // subchunk ids
        message DbTbl {
            required string db = 1;
            required string tbl = 2;
       }
    }
    message Fragment {
        // A query fragment without "CREATE or INSERT".
        // Worker should synthesize.
        repeated string query = 1;
        optional string resulttable = 3;
        optional Subchunk subchunks = 4; // Only needed with subchunk-ed queries

        // Each fragment may only write results to one table,
        // but multiple fragments may write to the same table,
        // in which case the table contains a concatenation of the
        // contributing fragments' rows.
    }
    repeated Fragment fragment = 5;
    message ScanTable {
        required string db = 1;
        required string table = 2;
        required bool lockInMemory = 3;
        required int32 scanRating = 4;
    }
    repeated ScanTable scantable = 9;
    optional uint64 queryid = 10;
    optional int32 jobid = 11;
    optional bool scaninteractive = 12;
    optional int32 attemptcount = 13;
    optional uint32 czarid = 14;
    optional int32 maxtablesize_mb = 15 [default = 0];
}

// Result message received from worker
// One of these headers is sent, if the czar requests result bundling.
// If sent, an int64 size (network-byte-ordered) is always sent before
// the ResultHeader message, indicating the size of the ResultHeader
// object.
// The Header message contains size information so each result can be
// distinguished.
// This message must be 255 characters or less, because its size is
// transmitted as an unsigned char.
message ProtoHeader {
    optional fixed32 protocol = 1;
    optional sfixed32 size = 2; // protobufs discourages messages > megabytes
    optional bytes md5 = 3;
    optional string wname = 4;
    optional bool largeresult = 5; // DEPRECATED
    optional bool endnodata = 6; // True if this header is the end, no more data. size should be 0.
    optional uint32 seq = 7; // sequence number from SendChannel
    optional int32 scsseq = 8; // sequence number from SendChannelShared, can be -1
}

// DEPRECATED
message ColumnSchema {
    optional string name = 1; // Optional to allow type-only transmission
    optional string sqltype = 2;
    optional int32 mysqltype = 3;
}

// DEPRECATED
message RowSchema {
    repeated ColumnSchema columnschema = 1;
}

message RowBundle {
    repeated bytes column = 1; // bytes to allow BLOB encoding
    repeated bool isnull = 2; // Flag to allow sending nulls.
}

message Result {
    optional int64 session = 1;
    optional RowSchema rowschema = 2; // DEPRECATED
    optional int32 errorcode = 3;
    optional string errormsg = 4;
    repeated RowBundle row = 5;
    optional uint64 queryid = 6;
    optional int32 jobid = 7;
    optional uint32 rowcount = 8;
    optional uint64 transmitsize = 9;
    optional int32 attemptcount = 10;
    optional string fileresource_xroot = 11;    /// XROOTD url for the result file
    optional string fileresource_http = 12;     /// HTTP url for the result file
}

// Result protocol 2:
// Byte 0: N = unsigned char size of ProtoHeader
// Byte 1-N: ProtoHeader message
// Byte N+1, extent = ProtoHeader.size, Result msg
// (successive Result msgs indicated by size markers in previous Result msgs)


////////////////////////////////////////////////////////////////
// Protocol definition for the worker management commands
//
// ATTENTION: each message sent or received must be preceeded by
// an int32 size (network-byte-ordered) word carrying a size
// of the message.
////////////////////////////////////////////////////////////////

// All requests sent to worker management resources should start with
// sending this message carrying an identifier of a command. Specific
// commands may require additional parameters which should be sent as
// separate messages (of the corresponding types).
message WorkerCommandH {
    enum Command {
        TEST_ECHO           = 1;    // Return back a value sent to the command processor.
        ADD_CHUNK_GROUP     = 2;    // Add a group of collocated chunks.
        REMOVE_CHUNK_GROUP  = 3;    // Remove a group of collocated chunks.
        UPDATE_CHUNK_LIST   = 4;    // Update (rebuild and/or reload) the list of available chunks.
        GET_CHUNK_LIST      = 5;    // Return a list of chunks known to a worker.
        SET_CHUNK_LIST      = 6;    // Set a new list of chunks.
        GET_STATUS          = 7;    // Return various status info on a worker.
        GET_DATABASE_STATUS = 8;    // Return various info on the worker database service.
        GET_CONFIG          = 9;    // Return configuration parameters of the worker database service.
    }
    required Command command = 1;
}

// The completion status to be sent back with responses to the worker commands.
message WorkerCommandStatus {
    enum Code {
        SUCCESS = 1;    // The sccessful completion of a request.
        INVALID = 2;    // Invalid parameters of the request.
        IN_USE  = 3;    // The request is rejected because one of the chunks is in use.
        ERROR   = 4;    // An error occurred during command execution.
    }
    optional Code code = 1 [default = SUCCESS];
    optional string error = 2 [default = ""];   // Optional error message (depends on the code)
}

// This message must be sent after the command header to provide
// a service with a value to be echoed back in response to
// the 'TEST_ECHO' command.
message WorkerCommandTestEchoM {
    required string value = 1;  // The input string to be returned back by the service
}

// The message to be sent back in response to the 'TEST_ECHO' command
message WorkerCommandTestEchoR {
    required WorkerCommandStatus status = 4;    // Completion status of the operation
    required string value = 3;                  // The original value returned by the operation
}

// The message type embedded into the relevant contexts below
message WorkerCommandChunk {
    required string db        = 1;
    required uint32 chunk     = 2;
    optional uint32 use_count = 3 [default = 0];    // depends on a context
}

// This message must be sent after the command header for the 'ADD_CHUNK_GROUP'
// or 'REMOVE_CHUNK_GROUP' command to tell the service which chunks needs to be
// added or removed.
message WorkerCommandChunkGroupM {
   required uint32 chunk = 1;
   repeated string dbs   = 2;
   optional bool force = 3 [ default = false];
}

// The message to be sent back in response to the 'ADD_CHUNK_GROUP'
// or 'REMOVE_CHUNK_GROUP' commands.
message WorkerCommandChunkGroupR {
    required WorkerCommandStatus status = 3;    // Completion status of the operation
}

// This message must be sent after the command header for the 'UPDATE_CHUNK_LIST'
// command.
message WorkerCommandUpdateChunkListM {
    required bool rebuild = 1;  // Rebuild the list from actual tables existing in the database
    required bool reload = 2;   // Reload the new list into a worker
}

// The message to be sent back in response to the 'UPDATE_CHUNK_LIST'
// command.
message WorkerCommandUpdateChunkListR {
    required WorkerCommandStatus status = 5;    // Completion status of the operation
    repeated WorkerCommandChunk added   = 3;    // Chunks that were added
    repeated WorkerCommandChunk removed = 4;    // Chunks that were removed
}

// The message to be sent back in response to the 'GET_CHUNK_LIST'
// command.
message WorkerCommandGetChunkListR {
    required WorkerCommandStatus status = 4;    // Completion status of the operation
    repeated WorkerCommandChunk chunks = 3;
}

// This message must be sent after the command header for the 'SET_CHUNK_LIST'
// to tell the service which chunks needs to be set.
message WorkerCommandSetChunkListM {
    repeated WorkerCommandChunk chunks = 1;
    optional bool force = 2 [ default = false];
    repeated string databases = 3;  // The operation involves databases listed here
}

// The message to be sent back in response to the 'SET_CHUNK_LIST'
// command.
message WorkerCommandSetChunkListR {
    required WorkerCommandStatus status = 4;    // Completion status of the operation
    repeated WorkerCommandChunk chunks = 3;     // The previous list of chunks
}

// This message must be sent after the command header for the 'GET_STATUS'
// to customize a scope of the request.
message WorkerCommandGetStatusM {
    // Include detailed info on the tasks
    optional bool include_tasks = 1 [ default = false];

    // Narrow a scope of the request that involves tasks (the above-define parameter
    // 'include_tasks = true') to a specific collection of queries.
    repeated uint64 query_ids = 2;

    // An optional selector for the state(s) of tasks. If the collection
    // is empty then the selector is disregarded. Values to be put into
    // the collection are the integer representation of the following transient
    // C++ enum type 'wbase::TaskState'. These values are expected to be
    // validated and upconverted into the enum class by the worker.
    repeated uint64 task_states = 3;

    // An optional limit for the number of tasks to be reported.
    // Note that no specific ordering for tasks is assumed when applying
    // this limit.
    optional uint32 max_tasks = 4 [ default = 0 ];
}

// The message to be sent back in response to the 'GET_STATUS' command
message WorkerCommandGetStatusR {
    required WorkerCommandStatus status = 2;    // Completion status of the operation
    required string info = 1;                   // Status info serialized from a JSON object
}

// The message to be sent back in response to the 'GET_DATABASE_STATUS' command
//
message WorkerCommandGetDbStatusR {
    required WorkerCommandStatus status = 1;    // Completion status of the operation
    required string info = 2;                   // Status info serialized from a JSON object
}

// The message to be sent back in response to the 'GET_CONFIG' command
//
message WorkerCommandGetConfigR {
    required WorkerCommandStatus status = 1;    // Completion status of the operation
    required string info = 2;                   // Configuration info serialized from a JSON object
}

/////////////////////////////////////////////////////////////////
// Protocol definition for the query management requests. These
// requests do not require any response messages to be explicitly
// sent by workers.
//
// ATTENTION: each message sent to a worker must be preceeded by
// an int32 size (network-byte-ordered) word carrying a size
// of the message.
////////////////////////////////////////////////////////////////

message QueryManagement {
    enum Operation {
        CANCEL_AFTER_RESTART = 1;   // Cancel older queries before the specified query (excluding that one).
        CANCEL = 2;                 // Cancel a specific query.
        COMPLETE = 3;               // Notify workers on the completion of the specified query.
    }
    required Operation op = 1;
    required uint64 query_id = 2;
}
